pipeline {
    agent {
        label 'amzl-honeur-upgrade'
    }

    stages {
        stage('build image') {
            steps {
                script {
                    dir('Honeur-Setup/cli') {
                        withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                            sh './build.sh'
                        }
                    }
                }
            }
        }
//         stage('upload image') {
//             steps {
//                 script {
//                     dir('Honeur-Setup/cli') {
//                         try {
//                             withDockerRegistry(credentialsId: "harbor-honeur-library-robot-uat", url: "https://harbor-uat.honeur.org") {
//                                 sh "THERAPEUTIC_AREA_URL=harbor-uat.honeur.org ./publish.sh"
//                             }
//                         } catch (e) {
//                             notifyPushFailed("https://harbor-uat.honeur.org")
//                         }
//                     }
//                 }
//             }
//         }
        stage('Save dependencies') {
            steps {
                script {
                    sh 'docker run --rm --name feder8-installer -e CURRENT_DIRECTORY=$(pwd) -e IS_WINDOWS=false -e IS_MAC=false -e DOCKER_CERT_SUPPORT=false -v /output:/output -v /var/run/docker.sock:/var/run/docker.sock feder8/install-script:2.0.18 feder8 init export-all-image-name-tags -o /output'
                    files = sh(script: 'ls -1 /output', returnStdout: true).split()
                    files.each() { file ->
                        fileString = readFile encoding: 'UTF-8', file: '/output/' + file
                        tags = fileString.split()
                        tags.each() { tag ->
                            withDockerRegistry(credentialsId: "harbor-${file}-robot-uat", url: "https://harbor-uat.${file}.org") {
                                sh "docker pull ${tag}"
                            }
                        }
                    }
                }
            }
        }
    }
}

def notifyPushFailed(url) {
  emailext (
      subject: "FAILED To push image",
      body: """<p>Jenkins failed to push image to ${url}</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
      to: "sverwim1@its.jnj.com,pmoorth1@its.jnj.com"
    )
}