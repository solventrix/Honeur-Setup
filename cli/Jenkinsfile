pipeline {
    agent {
        label 'amzl-honeur-upgrade'
    }

    environment {
        VERSION = sh(
                script: 'cat Honeur-Setup/cli/VERSION',
                returnStdout: true
            ).trim()
    }

    stages {
        stage('build & upload image') {
            steps {
                script {
                    dir('Honeur-Setup/cli') {
                        credentialsId = feder8.getCurrentEnvironment() == 'uat' ? "harbor-honeur-library-robot-uat" : "harbor-honeur-library-robot"
                        taInfo = feder8.getInfoForTA('honeur')
                        try {
                            withDockerRegistry(credentialsId: credentialsId, url: taInfo.getRegistry()) {
                                sh 'docker buildx create --use'
                                sh "THERAPEUTIC_AREA_URL=${taInfo.url} ./build-multi-arch.sh"
                                sh "docker pull ${taInfo.url}/library/install-script:${env.VERSION}"
                                sh "docker tag ${taInfo.url}/library/install-script:${env.VERSION} feder8/install-script:${env.VERSION}"
                            }
                        } catch (e) {
                            notifyPushFailed(taInfo.getRegistry())
                        }
                    }
                }
            }
        }
        stage('Save dependencies') {
            steps {
                script {
                        sh "docker run --rm --name feder8-installer -e CURRENT_DIRECTORY=\$(pwd) -e IS_WINDOWS=false -e IS_MAC=false -e DOCKER_CERT_SUPPORT=false -v /output:/output -v /var/run/docker.sock:/var/run/docker.sock feder8/install-script:${env.VERSION} feder8 init export-all-image-name-tags -o /output"
//                     files = sh(script: 'ls -1 /output', returnStdout: true).split()
//                     files.each() { file ->
                        file = 'honeur'
                        echo "attempting login for ${file}"
                        info = feder8.getInfoForTA(file)

                        credentialsId = feder8.getCurrentEnvironment() == 'uat' ? "harbor-${file}-robot-uat" : "harbor-${file}-robot"

                        withDockerRegistry(credentialsId: credentialsId, url: info.getRegistry()) {
                            fileString = readFile encoding: 'UTF-8', file: '/output/' + file
                            tags = fileString.split()
                            successFullyPulledTags = []
                            tags.each() { tag ->
                                try {
                                    sh "docker pull --quiet ${tag}"
                                    successFullyPulledTags.add(tag)
                                } catch (e) {
                                    echo "Could not pull tag ${tag}"
                                }
                            }

                            successFullyPulledTags.add("${info.url}/library/install-script")

                            tagsForSaving = successFullyPulledTags.join(" ")
                            outputFile = "./feder8-local-install-${env.VERSION}"
                            sh "mkdir ${outputFile}"
                            sh "docker save ${tagsForSaving} -o ${outputFile}/images.tar"
                            sh "cp -RT Honeur-Setup/local-installation/offline-helper-scripts ${outputFile}/"
                            sh "tar -zcvf ./${file}.tar.gz ${outputFile}"

                            bucket = feder8.getCurrentEnvironment() == 'uat' ? "feder8-download-bucket-uat" : "feder8-download-bucket"

                            sh "aws s3 cp ./${file}.tar.gz s3://${bucket}/${file}/feder8-local-install-${env.VERSION}.tar.gz"
                        }
//                     }
                }
            }
        }
    }
}

def notifyPushFailed(url) {
  emailext (
      subject: "FAILED To push image",
      body: """<p>Jenkins failed to push image to ${url}</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
      to: "pmoorth1@its.jnj.com,sgyina1@its.jnj.com"
    )
}
