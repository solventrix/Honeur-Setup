pipeline {
    agent {
        label 'amzl-honeur-upgrade'
    }

    environment {
        VERSION = 'shawn-test'
    }

    stages {
        stage('build image') {
            steps {
                script {
                    dir('Honeur-Setup/cli') {
                        withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME')]) {
                            sh './build.sh'
                        }
                    }
                }
            }
        }
        stage('upload image') {
            steps {
                script {
                    dir('Honeur-Setup/cli') {
                        try {
                            withDockerRegistry(credentialsId: "harbor-honeur-library-robot-uat", url: "https://harbor-uat.honeur.org") {
                                sh "THERAPEUTIC_AREA_URL=harbor-uat.honeur.org ./publish.sh"
                            }
                        } catch (e) {
                            notifyPushFailed("https://harbor-uat.honeur.org")
                        }
                    }
                }
            }
        }
        stage('Save dependencies') {
            steps {
                script {
                    sh "docker run --rm --name feder8-installer -e CURRENT_DIRECTORY=$(pwd) -e IS_WINDOWS=false -e IS_MAC=false -e DOCKER_CERT_SUPPORT=false -v /output:/output -v /var/run/docker.sock:/var/run/docker.sock feder8/install-script:${env.VERSION} feder8 init export-all-image-name-tags -o /output"
//                     files = sh(script: 'ls -1 /output', returnStdout: true).split()
//                     files.each() { file ->
                        file = 'honeur'
                        echo "attempting login for ${file}"
                        domain = getTADomain(file)
                        withDockerRegistry(credentialsId: "harbor-${file}-robot", url: "https://harbor.${domain}") {
                            fileString = readFile encoding: 'UTF-8', file: '/output/' + file
                            tags = fileString.split()
                            successFullyPulledTags = []
                            tags.each() { tag ->
                                nonUatTag = tag.replace('-uat', '')
                                try {
                                    sh "docker pull --quiet ${nonUatTag}"
                                    successFullyPulledTags.add(nonUatTag)
                                } catch (e) {
                                    echo "Could not pull tag ${nonUatTag}"
                                }

                            }
                            successFullyPulledTags.remove('alpine:3.15.0')
                            successFullyPulledTags.remove('postgres:13')
                            successFullyPulledTags.add("harbor-uat.${domain}/library/install-script")

                            tagsForSaving = successFullyPulledTags.join(" ")
                            dir('output-zip') {}
                            sh "docker save ${tagsForSaving} -o output-zip/images.tar"
                            sh "cp -R Honeur-Setup/local-installation/helper-scripts output-zip/helper-scripts"
                            sh "tar -zcvf ./${file}.tar.gz output-zip"
                            sh "aws s3 cp ./${file}.tar.gz s3://feder8-download-bucket/${file}/feder8-local-install-${env.VERSION}.tar.gz"
                        }
//                     }
                }
            }
        }
    }
}

def notifyPushFailed(url) {
  emailext (
      subject: "FAILED To push image",
      body: """<p>Jenkins failed to push image to ${url}</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
      to: "sverwim1@its.jnj.com,pmoorth1@its.jnj.com"
    )
}

def getTADomain(area) {
  switch(area) {
    case "honeur":
        return "honeur.org"
    case "phederation":
        return "phederation.org"
    case "esfurn":
        return "esfurn.org"
    case "athena":
        return "athenafederation.org"
    case "lupus":
        return "lupusnet.org"
    case "athena":
        return "athenafederation.org"
    default:
        return "honeur.org"
  }
}